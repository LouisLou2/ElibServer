<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.leo.elib.mapper.UserMapper">

    <resultMap id="UserMap" type="User" autoMapping="true">
        <id column="user_id" property="userId"/>
    </resultMap>

    <resultMap id="UserRestrictionMap" type="UserRestriction" autoMapping="true">
        <result column="sum_of_pickWaited_returnWaited" property="sumOfPickWaitedReturnWaited"/>
        <result column="cancelled_times_within" property="cancelledTimesWithin"/>
        <result column="abnormal_pick_return_within" property="abnormalPickReturnWithin"/>
    </resultMap>

    <select id="getUserById" resultType="User" resultMap="UserMap">
        SELECT *
        FROM user
        WHERE user_id = #{userId}
    </select>
    <select id="getUserByEmail" resultType="User" resultMap="UserMap">
        SELECT *
        FROM user
        WHERE email = #{email}
    </select>

    <select id="checkEmailExist" resultType="boolean">
        select if(count(*) > 0, true, false)
        from user
        where email = #{email}
    </select>

    <select id="getUserRestriction" resultMap="UserRestrictionMap">
        SELECT
            a.count as sum_of_pickWaited_returnWaited,
            b.count as cancelled_times_within,
            c.count as abnormal_pick_return_within,
            u.restricted
        FROM
            (SELECT COUNT(*) AS count FROM reservation where user_id = #{userId} and (status = #{waitingPickUp} or status = #{waitingReturn})) a,
            (SELECT COUNT(*) AS count FROM reservation where user_id = #{userId} and reserve_time > #{start} and status = #{cancelled}) b,
            (SELECT COUNT(*) AS count FROM reservation where user_id = #{userId} and reserve_time > #{start} and (status = #{overduePickUp} or status = #{overdueReturn} or status =#{cantReturn})) c,
            (select restricted from user where user_id = #{userId}) u
    </select>

    <!--    <select id="getUserRestriction" resultMap="UserRestrictionMap">-->
<!--        select restricted, overdue_count_this_month-->
<!--        from user-->
<!--        where user_id = #{userId}-->
<!--    </select>-->
</mapper>